name: Create Release

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Read and format release information
        id: release-info
        run: |
          RELEASE_INFO=$(cat release-info.json)
          VERSION=$(echo "$RELEASE_INFO" | jq -r .version)
          PRE_RELEASE=$(echo "$RELEASE_INFO" | jq -r .pre_release)

          # Format New Features, include only if not empty
          NEW_FEATURES=$(echo "$RELEASE_INFO" | jq -r '.release_notes.new_features | join("\n* ")')
          if [ -n "$NEW_FEATURES" ]; then
            FORMATTED_NEW_FEATURES="## New Features:\n* $NEW_FEATURES"
          else
            FORMATTED_NEW_FEATURES=""
          fi

          # Format Bug Fixes, include only if not empty
          BUG_FIXES=$(echo "$RELEASE_INFO" | jq -r '.release_notes.bug_fixes | join("\n* ")')
          if [ -n "$BUG_FIXES" ]; then
            FORMATTED_BUG_FIXES="## Bug Fixes:\n* $BUG_FIXES"
          else
            FORMATTED_BUG_FIXES=""
          fi

          # Combine release notes, ensuring newlines are handled properly
          RELEASE_NOTES="${FORMATTED_NEW_FEATURES}\n\n${FORMATTED_BUG_FIXES}"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=notes::$RELEASE_NOTES"
          echo "::set-output name=pre_release::$PRE_RELEASE"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.release-info.outputs.version }}
          release_name: "Release: ${{ steps.release-info.outputs.version }}"
          body: ${{ steps.release-info.outputs.notes }}
          draft: false
          prerelease: ${{ steps.release-info.outputs.pre_release }}
        env:
          GITHUB_TOKEN: ${{ secrets.workflow }}
